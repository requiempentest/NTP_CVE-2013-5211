/* 
CVE-2013-5211
Date: Wednesday, October 16, 2024 (16.10.2024)
Autor: requiempentest
*/
using System;
using System.Net;
using System.Net.Sockets;

namespace NTPVulnerabilityChecker
{
    class Program
    {
        static void Main(string[] args)
        {
            // Запрос ввода IP-адреса и порта у пользователя
            Console.Write("Введите IP-адрес NTP-сервера (en: Enter the IP address of the NTP server): ");
            string server = Console.ReadLine();

            Console.Write("Введите порт NTP-сервера, по умолчанию 123 (en: Enter the NTP server port, 123 by default): ");
            string portInput = Console.ReadLine();

            int port = 123; // Порт по умолчанию
            if (!string.IsNullOrEmpty(portInput))
            {
                if (!int.TryParse(portInput, out port))
                {
                    Console.WriteLine("Неверный формат порта. Использую порт по умолчанию: 123 (en: The port format is incorrect. I use the default port: 123)");
                    port = 123;
                }
            }

            bool isVulnerable = CheckVulnerability(server, port);

            if (isVulnerable)
            {
                Console.WriteLine($"ru: IP-адрес {server} имеет включенную команду monlist в NTP Daemon (ntpd) и уязвим к DoS-атаке.");
                Console.WriteLine($"en: The IP address {server} has the monlist command enabled in the NTP Daemon (ntpd) and is vulnerable to a DoS attack.");
            }
            else
            {
                Console.WriteLine($"ru: IP-адрес {server} не имеет включенной команды monlist в NTP Daemon (ntpd) или не уязвим к DoS-атаке.");
                Console.WriteLine($"en: The IP address {server} does not have the monlist command enabled in the NTP Daemon (ntpd) or is not vulnerable to a DoS attack.");
            }
        }

        static bool CheckVulnerability(string server, int port)
        {
            using (UdpClient udpClient = new UdpClient())
            {
                try
                {
                    // Установка таймаута в 5 секунд
                    udpClient.Client.ReceiveTimeout = 5000;

                    // Формирование NTP-пакета (48 байт)
                    byte[] ntpPacket = new byte[48];
                    ntpPacket[0] = 0x17;
                    ntpPacket[1] = 0x00;
                    ntpPacket[2] = 0x03;
                    ntpPacket[3] = 0x2A;

                    // Разрешение доменного имени в IP-адрес
                    IPAddress[] addresses = Dns.GetHostAddresses(server);
                    if (addresses.Length == 0)
                    {
                        Console.WriteLine($"ru: Не удалось разрешить домен: {server}");
                        Console.WriteLine($"en: Domain could not be resolved: {server}");
                        return false;
                    }
                    IPEndPoint endPoint = new IPEndPoint(addresses[0], port);

                    // Отправка NTP-пакета
                    udpClient.Send(ntpPacket, ntpPacket.Length, endPoint);

                    // Ожидание ответа
                    IPEndPoint remoteEndPoint = null;
                    byte[] receivedData = udpClient.Receive(ref remoteEndPoint);

                    if (receivedData.Length > 0)
                    {
                        Console.WriteLine($"ru: Этот NTP-сервер уязвим к CVE-2013-5211: {remoteEndPoint.Address}");
                        Console.WriteLine($"en: This NTP server is vulnerable to CVE-2013-5211: {remoteEndPoint.Address}");
                        return true;
                    }
                    else
                    {
                        Console.WriteLine($"ru: Сервер не уязвим: {endPoint.Address}");
                        Console.WriteLine($"en: The server is not vulnerable: {endPoint.Address}");
                        return false;
                    }
                }
                catch (SocketException ex)
                {
                    if (ex.SocketErrorCode == SocketError.TimedOut)
                    {
                        Console.WriteLine($"ru: Таймаут: {server}");
                        Console.WriteLine($"en: Timeout: {server}");
                    }
                    else
                    {
                        Console.WriteLine($"ru: Ошибка сокета: {ex.Message}");
                        Console.WriteLine($"en: Socket error: {ex.Message}");

                    }
                    return false;
                }
                catch (Exception ex)
                {
                    Console.WriteLine($"ru: Произошла ошибка: {ex.Message}");
                    Console.WriteLine($"en: An error has occurred: {ex.Message}");
                    return false;
                }
            }
        }
    }
}
